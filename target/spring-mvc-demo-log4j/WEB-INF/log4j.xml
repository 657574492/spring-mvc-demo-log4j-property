<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">

	<!--输出方式：输出到控制台-->
	<appender name="Console" class="org.apache.log4j.ConsoleAppender">
		<!--   
			设置通道名称和输出方式，其中输出方式appender有5种,分别为  
			org.apache.log4j.RollingFileAppender      
			org.apache.log4j.ConsoleAppender (控制台)  
			org.apache.log4j.FileAppender (文件)     
			org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)     
			org.apache.log4j.WriterAppender (将日志信息以流格式发送到指定地方)  
		-->
		<param name="Target" value="System.out" />
		<!-- Threshold是个全局的过滤器，他将把低于所设置的level的信息过滤不显示出来 -->
		<param name="Threshold" value="debug" />

		<!-- 设置日志输出的格式-->
		<layout class="org.apache.log4j.PatternLayout">
			<!--   
				参数都以%开始后面不同的参数代表不同的格式化信息：     
				%c  输出所属类的全名，可在修改为 %d{Num} ,Num类名输出的范围  
				如："org.apache.elathen.ClassName",%C{2} 将输出elathen.ClassName      
				
				%d  输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}，可指定格式 如 %d{HH:mm:ss}     
				
				%l  输出日志事件发生位置，包括类目名、发生线程，在代码中的行数    
				
				%n  换行符     
				
				%m  输出代码指定信息，如WARN(“message”),输出message     
				
				%p  输出优先级，即 FATAL ,ERROR 等     
				
				%r  输出从启动到显示该log信息所耗费的毫秒数     
				
				%t  输出产生该日志事件的线程名
			-->
			<!-- The default pattern: Date Priority [Category] Message\n -->
			<param name="ConversionPattern" value="%d{ABSOLUTE} %p [%l] %m%n" />
		</layout>
	</appender>

	<!-- 输出到日志文件 每天一个日志  -->   
    <appender name="RootLogger" class="org.apache.log4j.DailyRollingFileAppender">      
        <param name="File" value="../../logs/wechat_order_food/pflm.log" />      
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'" />  
        <layout class="org.apache.log4j.PatternLayout">      
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss\} %-5p] [%t] (%c:%L) - %m%n" />      
        </layout>      
    </appender> 
    
	<!--  
		level: 是日记记录的优先级，优先级由高到低分为      
		OFF ,FATAL ,ERROR ,WARN ,INFO,DEBUG ,ALL。     
		Log4j 建议只使用FATAL ,ERROR ,WARN ,INFO,DEBUG这四个级别。  
	-->
	<!--  
		输出指定类包中的日志，比如想输出     
		ibatis运行中生成的SQL语句，可作如下设置     
	-->
	
	 <!-- spring -->
	 <logger name="org.springframework" additivity="false">
	  <level value="warn" />
	  <appender-ref ref="Console" />
	  <appender-ref ref="RootLogger" />
	 </logger>
	
    <!-- 下面是打印mybatis语句的配置-->
	  <!-- ibatis -->
	 <logger name="com.ibatis" additivity="true">
	  <level value="debug" />
	 </logger>
	
	 <!-- ibatis连接 -->
	 <logger name="java.sql.Connection" additivity="true">
	  <level value="debug" />
	 </logger>
	
	 <!-- ibatis编译 -->
	 <logger name="java.sql.Statement" additivity="true">
	  <level value="debug" />
	 </logger>
	 
	 <!-- ibatis显示预编译sql日志 -->
	 <logger name="java.sql.PreparedStatement" additivity="true">
	  <level value="debug" />
	  <appender-ref ref="Console" />
	  <appender-ref ref="RootLogger" />
	 </logger>
	 <!-- ibatis显示结果集日志 -->
	 <logger name="java.sql.ResultSet" additivity="true">
	  <level value="debug" />
	  <appender-ref ref="Console" />
	  <appender-ref ref="RootLogger" />
	 </logger>

	<!-- 默认会自动构建一个 root,输出WARN级别的日志到控制台，供logger继承 -->
	<root>
		<priority value="debug" />
		<appender-ref ref="Console" />
		<appender-ref ref="RootLogger" />
	</root>
</log4j:configuration>